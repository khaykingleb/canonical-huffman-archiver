[tool.poetry]
name = "canonical-huffman-archiver"
version = "0.1.0"
description = "Canonical huffman archiver"
authors = ["Gleb Khaykin <khaykingleb@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">3.10,<3.12"
conan = "2.2.3"

[tool.poetry.group.dev.dependencies]
commitizen = "^2.37.0"
pre-commit = "^2.20.0"
detect-secrets = "^1.4.0"

[tool.semantic_release]
version_variable = [
  "pyproject.toml:version",
]
version_pattern = [
  "Makefile:^VERSION := {version}"
]
branch = "master"
upload_to_pypi = false
upload_to_release = false
commit_subject = "chore(release): v{version} [skip ci]"

[tool.ruff]
target-version = "py310"
line-length = 100
indent-width = 4

# Exclude a variety of commonly ignored directories
exclude = [
    ".github",
    ".git",
]

[tool.ruff.lint]
select = [
  "RUF",   # ruff checks
  "F",     # pyflakes
  "E",     # pycodestyle
  "W",     # pycodestyle
  "C90",   # mcabbe
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ANN",   # flake8-annotations
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "C4",    # flake8-comprehensions
  "DTZ",   # flake8-datetimez
  "T10",   # flake8-debugger
  "EM",    # flake8-errmsg
  "ISC",   # flake8-implicit-str-concat
  "G",     # flake8-logging-format
  "LOG",   # flake8-logging
  "INP",   # flake8-no-pep420
  "PIE",   # flake8-pie
  "T20",   # flake8-print
  "PYI",   # flake8-pyi
  "PT",    # flake8-pytest-style
  "Q",     # flake8-quotes
  "RSE",   # flake8-raise
  "RET",   # flake8-return
  "SLOT",  # flake8-slot
  "SIM",   # flake8-simplify
  "TID",   # flake8-tidy-imports
  "TCH",   # flake8-type-checking
  "INT",   # flake8-gettext
  "ARG",   # flake8-unused-arguments
  "PTH",   # flake8-use-pathlib
  "TD",    # flake8-todos
  "ERA",   # flake8-eradicate
  "PD",    # pandas-vet
  "PGH",   # pygrep
  "PL",    # pylint
  "TRY",   # tryceratops
  "FLY",   # flynt
  "NPY",   # NumPy-specific rules
  "PERF",  # Perflint
  "FURB",  # refurb
]
ignore = [
  "ANN101",  # missing type annotation for `self` in method
  "ANN002",  # missing type annotation for `*args`
  "ANN003",  # missing type annotation for `**kwargs`
  "ANN204",  # missing return type annotation for special method
  "D105",    # missing docstring in magic method
  "PLR0913", # too many arguments in function definition ({c_args} > {max_args})
]
fixable = [
    "I",      # isort
    "D"       # pydocstyle
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
